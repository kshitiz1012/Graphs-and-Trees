const int N=1e5+10;
vector<pair<ll,ll>> adj[N];
vector<ll> level(N,1e15);
void bfs(ll root)
{
    priority_queue<pair<ll, ll>, vector<pair<ll, ll>>, greater<pair<ll, ll>>> pq;
    
    pq.push({0,root});
    level[root]=0;
    
    while(pq.size())
    {
        auto it=pq.top();
        ll node=(it).second;
        ll dist=(it).first;
        pq.pop();
        
        if (dist> level[node])
        continue;

        for(auto &p:adj[node])
        {
            if(level[p.first]>dist+p.second)
            {
                level[p.first]=dist+p.second;
                pq.push({level[p.first],p.first});
            }
        }
    }
}
void solve()
{
    ll vertices,edges;
    cin>>vertices>>edges;
    
    for(int i=0;i<edges;i++)
    {
        ll first,second,wt;
        cin>>first>>second>>wt;
        adj[first].push_back({second,wt});
    }
    
    // 1 is the root node.
    bfs(1);
}
