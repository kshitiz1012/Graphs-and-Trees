#include<bits/stdc++.h>
using namespace std;
 
 
#define ll long long
#define ld long double
#define endl "\n"
#define yes cout<<"YES"<<endl
#define no  cout<<"NO"<<endl
class DisjointSet {
    vector<ll> rank, parent, size;
public:
    DisjointSet(ll n) {
        rank.resize(n + 1, 0);
        parent.resize(n + 1);
        size.resize(n + 1);
        for (int i = 0; i <= n; i++) {
            parent[i] = i;
            size[i] = 1;
        }
    }

    int findUPar(ll node) {
        if (node == parent[node])
            return node;
        return parent[node] = findUPar(parent[node]);
    }

    void unionByRank(ll u, ll v) {
        int ulp_u = findUPar(u);
        int ulp_v = findUPar(v);
        if (ulp_u == ulp_v) return;
        if (rank[ulp_u] < rank[ulp_v]) {
            parent[ulp_u] = ulp_v;
        }
        else if (rank[ulp_v] < rank[ulp_u]) {
            parent[ulp_v] = ulp_u;
        }
        else {
            parent[ulp_v] = ulp_u;
            rank[ulp_u]++;
        }
    }

    void unionBySize(ll u, ll v) {
        int ulp_u = findUPar(u);
        int ulp_v = findUPar(v);
        if (ulp_u == ulp_v) return;
        if (size[ulp_u] < size[ulp_v]) {
            parent[ulp_u] = ulp_v;
            size[ulp_v] += size[ulp_u];
        }
        else {
            parent[ulp_v] = ulp_u;
            size[ulp_u] += size[ulp_v];
        }
    }
};
void solve()
{
     DisjointSet dsu(7);
     // Adding edges
     dsu.unionBySize(1,2);
     dsu.unionBySize(2,3);
     dsu.unionBySize(4,5);
     dsu.unionBySize(6,7);
     dsu.unionBySize(5,6);
     dsu.unionBySize(3,7);
     
     //Checking if 3 and 7 belongs to the same component
     if(dsu.findUPar(3)==dsu.findUPar(7))
     yes;
     else
     no;
}
int main()
{
     ll t=1;
	while(t--)
	{
	    solve();
	}  
	
}
